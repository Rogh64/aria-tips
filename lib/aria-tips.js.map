{"version":3,"sources":["src/aria-tips.coffee"],"names":[],"mappings":"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","file":"dist/lib/aria-tips.js","sourcesContent":["# Wrappers for AMD and CommonJS. Fallback to global scope.\n((root, factory) ->\n\n    # If AMD is used.\n    if typeof define is 'function' and define.amd\n        define [], factory\n\n    # If CommonJS is used.\n    else if typeof module is 'object' and module.exports\n        module.exports = factory()\n\n    # Otherwise bind to `window` object.\n    else\n        root.AriaTips = factory()\n\n)(this, ->\n\n    ###\n        * Tooltips are the elements that are displayed when the mouse hovers a\n        trigger.\n\n        * Triggers are the elements that listen to mouseover events in order to\n        show the tooltips.\n    ###\n\n\n    # Number of pixels the tooltip's arrow takes.\n    ARROW_DELTA = 6\n\n\n    # Unbinders are functions that unbind events on triggers. They are defined\n    # when the events are bound.\n    unbinders = []\n\n\n    # Do all the magic needed to show the tooltips!\n    bindAll = ->\n        # Unbind all existing events in order to prevent listening to the same\n        # event multiple times.\n        unbindAll()\n\n        # Get all tooltips in the DOM.\n        tips = document.querySelectorAll '[role=tooltip]'\n\n        for tip in tips\n            # Tooltips need to be appended to body for global positioning.\n            document.body.appendChild tip\n\n            # Get all triggers in the DOM.\n            triggers = document.querySelectorAll \"[aria-describedby=#{tip.id}]\"\n            for trigger in triggers\n\n                # Bind the mouseover/mouseout events on the trigger.\n                unbinder = bindEvents.call trigger\n\n                # Store the returned function to unbind the events if needed.\n                unbinders.push unbinder\n\n\n    # Remove all the magic that show the tooltips.\n    unbindAll = ->\n        unbinder() for unbinder in unbinders\n        unbinders = []\n\n\n    # Return the opposite position, given a position.\n    oppositePosition = (position) ->\n        switch position\n            when 'top'    then 'bottom'\n            when 'bottom' then 'top'\n            when 'left'   then 'right'\n            when 'right'  then 'left'\n\n\n    # Position the tooltip to its trigger.\n    # `this` must reference the tooltip.\n    positionTooltip = (trigger) ->\n\n        # Reset tooltip's direction if it has been previously overriden.\n        resetTooltip.call this\n\n        # Direction can be defined in the trigger or in the tooltip. The trigger\n        # has priority.\n        direction = trigger.dataset.tooltipDirection or \\\n                    @dataset.tooltipDirection\n\n        # Get the trigger's center coordinates.\n        boundingBox = trigger.getBoundingClientRect()\n        center =\n            x: 0 | boundingBox.left + (boundingBox.right - boundingBox.left) / 2\n            y: 0 | boundingBox.top + (boundingBox.bottom - boundingBox.top) / 2\n\n        # Add page offset to get the right position when the page is scrolled.\n        center.x = center.x + window.pageXOffset\n        center.y = center.y + window.pageYOffset\n\n        # Initialize the tooltip positionning.\n        result =\n            top:    'auto'\n            bottom: 'auto'\n            left:   'auto'\n            right:  'auto'\n\n        # Get the direction's position value.\n        position = switch direction\n            when 'top'\n                window.innerHeight - boundingBox.top - window.pageYOffset\n            when 'bottom'\n                boundingBox.bottom + window.pageYOffset\n            when 'left'\n                window.innerWidth - boundingBox.left - window.pageXOffset\n            when 'right'\n                boundingBox.right + window.pageXOffset\n\n        # Get the opposite direction's position value.\n        oppositeDirection = oppositePosition direction\n        result[oppositeDirection] = \"#{0 | position + ARROW_DELTA}px\"\n\n        # Set the position for the axis perpendicular to the one defined\n        # by (position, oppositeDirection).\n        switch direction\n            when 'top', 'bottom' then result.left = \"#{center.x}px\"\n            when 'left', 'right' then result.top = \"#{center.y}px\"\n\n        # Perform the positioning by setting the tooltip's attributes.\n        @style[prop] = value for prop, value of result\n\n        # If the default tooltip's direction has been overriden by the trigger,\n        # we must keep the original direction, and set the overriden direction\n        # to the tooltip.\n        unless direction is @dataset.tooltipDirection\n            @origDirection = @dataset.tooltipDirection\n            @dataset.tooltipDirection = direction\n\n\n    # Reset tooltip's direction.\n    # `this` must reference the tooltip.\n    resetTooltip = ->\n        if @origDirection\n            @dataset.tooltipDirection = @origDirection\n            @origDirection = null\n\n\n    # If the trigger has a defined `aria-label`, the lib automatically appends\n    # it in a `pre` tag.\n    # `this` must reference the tooltip.\n    fillTooltipLabel = (trigger) ->\n\n        # Remove existing labels in the tooltip.\n        labels = @querySelectorAll 'pre.label'\n        label.parentNode.removeChild label for label in labels\n\n        # Get label from the trigger.\n        labelText = trigger.getAttribute 'aria-label'\n\n        # If there is one, append it to the tooltip.\n        if labelText\n            label = document.createElement 'pre'\n            label.classList.add 'label'\n            label.innerHTML = \"(#{labelText})\"\n            @appendChild label\n\n\n    # Bind events on for a given trigger element.\n    # `this` must reference the trigger element.\n    bindEvents = ->\n\n        # Get the related tooltip\n        tooltipId = @getAttribute 'aria-describedby'\n        tip = document.querySelector \"##{tooltipId}\"\n\n        # Initialize timeout in the scope.\n        timeout = null\n\n        # `mouseover` event handler.\n        onMouseOver = =>\n\n            # Since the tooltip's appearance animation make the trigger lose\n            # the focus, the tooltip needs to be its own trigger to prevent it\n            # from \"flashing\". It's basically a debounce mechanism.\n            tip.addEventListener 'mouseover', onMouseOver\n            tip.addEventListener 'mouseout', onMouseOut\n\n            # If the tooltip is appearing or disappearing, clear the timeout.\n            if timeout\n                clearTimeout timeout\n                timeout = null\n                tip.setAttribute 'aria-hidden', false\n            else\n                # Initialize the tooltip.\n                fillTooltipLabel.call tip, this\n\n                # Position the tooltip.\n                positionTooltip.call tip, this\n\n                # Mark as shown after a short duration.\n                timeout = setTimeout ->\n                    tip.setAttribute 'aria-hidden', false\n                , 300\n\n        # `mouseover` event handler.\n        onMouseOut = ->\n\n            # For the same reason as in `onMouseOver`, we debounce the\n            # `mouseout` event handler.\n            clearTimeout timeout\n            timeout = setTimeout ->\n                timeout = null\n                tip.removeEventListener 'mouseover', onMouseOver\n                tip.removeEventListener 'mouseout', onMouseOut\n                tip.setAttribute 'aria-hidden', true\n            , 30\n\n\n        # Bind the actual events.\n        @addEventListener 'mouseover', onMouseOver\n        @addEventListener 'mouseout', onMouseOut\n\n        # Since a tooltip management is scoped (there is one pair of handlers\n        # for onMouseOver/onMouseOut events for each trigger), we return an\n        # unbind function so it can be called later on.\n        unbindEvents = =>\n            tip.removeEventListener 'mouseover', onMouseOver\n            tip.removeEventListener 'mouseout', onMouseOut\n            @removeEventListener 'mouseover', onMouseOver\n            @removeEventListener 'mouseout', onMouseOut\n\n        return unbindEvents\n\n\n    # The module's public interface.\n    return {\n        bind: -> bindAll()\n        unbind: -> unbindAll()\n    }\n)\n"]}